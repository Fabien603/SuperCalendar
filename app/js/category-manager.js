/**
 * Gestionnaire des cat√©gories d'√©v√©nements
 * Responsable de la gestion et du rendu des cat√©gories dans l'interface utilisateur
 */
export class CategoryManager {
    constructor(dataManager) {
        // R√©f√©rence au gestionnaire de donn√©es
        this.dataManager = dataManager;
        
        // √âl√©ments DOM
        this.categoriesNav = document.getElementById('categories-nav');
        this.categoryList = document.getElementById('category-list');
        this.categorySelect = document.getElementById('event-category');
        
        // Modal de gestion des cat√©gories
        this.categoriesModal = document.getElementById('categories-modal');
        this.addCategoryBtn = document.getElementById('add-category');
        this.updateCategoryBtn = document.getElementById('update-category');
        
        // Champs du formulaire de cat√©gorie
        this.categoryNameInput = document.getElementById('category-name');
        this.categoryEmojiInput = document.getElementById('category-emoji');
        this.categoryColorInput = document.getElementById('category-color');
        
        // ID de la cat√©gorie en cours d'√©dition
        this.currentEditingCategoryId = null;
        
        // Initialiser le s√©lecteur d'emoji
        this.initEmojiPicker();
        
        // Initialiser les √©couteurs d'√©v√©nements
        this.initEventListeners();
    }
    
    /**
     * Initialise tous les √©couteurs d'√©v√©nements li√©s aux cat√©gories
     */
    initEventListeners() {
        // Ouvrir la modal de gestion des cat√©gories
        const addCategoryButton = document.getElementById('add-category-btn');
        if (addCategoryButton) {
            addCategoryButton.addEventListener('click', () => {
                this.openCategoriesModal();
            });
        }
        
        // Fermer la modal
        if (this.categoriesModal) {
            const closeBtn = this.categoriesModal.querySelector('.modal-close');
            if (closeBtn) {
                closeBtn.addEventListener('click', () => {
                    this.categoriesModal.classList.remove('active');
                });
            }
            
            // Ajouter une nouvelle cat√©gorie
            if (this.addCategoryBtn) {
                this.addCategoryBtn.addEventListener('click', () => {
                    this.addCategory();
                });
            }
            
            // Mettre √† jour une cat√©gorie existante
            if (this.updateCategoryBtn) {
                this.updateCategoryBtn.addEventListener('click', () => {
                    this.updateCategory();
                });
            }
            
            // Clic en dehors de la modal pour la fermer
            this.categoriesModal.addEventListener('click', (e) => {
                if (e.target === this.categoriesModal) {
                    this.categoriesModal.classList.remove('active');
                }
            });
        }
        
        // √âcouter les √©v√©nements personnalis√©s pour mettre √† jour l'interface
        window.addEventListener('categories:updated', () => {
            this.renderCategories();
            this.renderCategoriesNav();
            this.updateCategorySelect();
        });
    }
    
    /**
     * Initialise le s√©lecteur d'emoji pour les cat√©gories
     */
    initEmojiPicker() {
        const emojiPickerBtn = document.getElementById('emoji-picker-button');
        const emojiPicker = document.getElementById('emoji-picker');
        
        if (!emojiPickerBtn || !emojiPicker) return;
        
        // Liste des emojis populaires organis√©s par th√®mes
        const popularEmojis = [
            // √âmojis g√©n√©raux
            'üòÄ', 'üòÉ', 'üòÑ', 'üòÅ', 'üòÜ', 'üòÖ', 'üòÇ', 'ü§£', 'üòä', 'üòá', 'üôÇ', 'üôÉ', 'üòâ', 'üòå', 'üòç', 'ü•∞',
            // Bureau et calendrier
            'üìä', 'üìÖ', 'üìÜ', 'üìà', 'üìâ', 'üìã', 'üìå', 'üìç', 'üìé', 'üìè', 'üìê', 'üìë', 'üìí', 'üìì', 'üìî', 'üìï',
            // Lieux et b√¢timents
            'üè†', 'üè°', 'üè¢', 'üè£', 'üè§', 'üè•', 'üè¶', 'üè®', 'üè´', 'üè¨', 'üè≠', 'üèØ', 'üè∞', 'üíí', 'üóº', '‚õ™',
            // Transport
            'üöó', 'üöï', 'üöô', 'üöå', 'üöé', 'üèéÔ∏è', 'üöì', 'üöë', 'üöí', 'üöê', 'üöö', 'üöõ', 'üöú', 'üõµ', 'üö≤', 'üõ¥',
            // Voyage
            '‚úàÔ∏è', 'üõ´', 'üõ¨', 'üõ©Ô∏è', 'üí∫', 'üöÅ', 'üö†', 'üö°', 'üöÄ', 'üåç', 'üåé', 'üåè', 'üåê', 'üó∫Ô∏è', 'üß≠', 'üèùÔ∏è',
            // Sports
            '‚öΩ', '‚öæ', 'üèÄ', 'üèê', 'üèà', 'üèâ', 'üéæ', 'üé≥', 'üèè', 'üèë', 'üèí', 'üèì', 'üè∏', '‚õ≥', 'üèåÔ∏è', 'ü•ä',
            // Activit√©s de loisirs
            'üéÆ', 'üé∞', 'üé≤', 'üß©', '‚ôüÔ∏è', 'üé≠', 'üé®', 'üé¨', 'üé§', 'üéß', 'üéº', 'üéπ', 'ü•Å', 'üé∑', 'üé∫', 'üé∏',
            // Affaires et finances
            'üíº', 'üß≥', 'üí∞', 'üí¥', 'üíµ', 'üí∂', 'üí∑', 'üí∏', 'üí≥', 'üßæ', 'üíπ', 'üìù', 'üìú', 'üìÑ', 'üì∞', 'üóûÔ∏è',
            // M√©tiers
            'üë©‚Äçüíº', 'üë®‚Äçüíº', 'üë©‚Äçüè´', 'üë®‚Äçüè´', 'üë©‚Äç‚öïÔ∏è', 'üë®‚Äç‚öïÔ∏è', 'üë©‚Äçüî¨', 'üë®‚Äçüî¨', 'üë©‚ÄçüöÄ', 'üë®‚ÄçüöÄ', 'üë©‚Äçüöí', 'üë®‚Äçüöí',
            // Golf sp√©cifiquement
            'üèåÔ∏è‚Äç‚ôÇÔ∏è', 'üèåÔ∏è‚Äç‚ôÄÔ∏è', '‚õ≥', 'üèÜ', 'ü•á', 'ü•à', 'ü•â', 'üèÖ'
        ];
        
        // √âv√©nement pour afficher/masquer le s√©lecteur d'emoji
        emojiPickerBtn.addEventListener('click', () => {
            // Vider et recr√©er le contenu du picker
            emojiPicker.innerHTML = '';
            
            // Remplir le s√©lecteur avec les emojis
            popularEmojis.forEach(emoji => {
                const emojiOption = document.createElement('div');
                emojiOption.className = 'emoji-item';
                emojiOption.textContent = emoji;
                emojiOption.addEventListener('click', () => {
                    this.categoryEmojiInput.value = emoji;
                    emojiPicker.style.display = 'none';
                });
                emojiPicker.appendChild(emojiOption);
            });
            
            // Afficher ou masquer le s√©lecteur
            emojiPicker.style.display = emojiPicker.style.display === 'grid' ? 'none' : 'grid';
        });
        
        // Fermer le s√©lecteur d'emoji en cliquant ailleurs
        document.addEventListener('click', (event) => {
            if (!emojiPickerBtn.contains(event.target) && !emojiPicker.contains(event.target)) {
                emojiPicker.style.display = 'none';
            }
        });
    }
    
    /**
     * Ouvre la modal de gestion des cat√©gories
     */
    openCategoriesModal() {
        if (!this.categoriesModal) return;
        
        // R√©initialiser le formulaire
        this.resetCategoryForm();
        
        // Afficher la modal
        this.categoriesModal.classList.add('active');
        
        // Afficher la liste des cat√©gories
        this.renderCategoryList();
    }
    
    /**
     * R√©initialise le formulaire de cat√©gorie
     */
    resetCategoryForm() {
        if (!this.categoryNameInput || !this.categoryEmojiInput || !this.categoryColorInput) return;
        
        this.categoryNameInput.value = '';
        this.categoryEmojiInput.value = '';
        this.categoryColorInput.value = '#4caf50';
        
        // Cacher le bouton de mise √† jour et afficher le bouton d'ajout
        if (this.addCategoryBtn && this.updateCategoryBtn) {
            this.addCategoryBtn.style.display = 'inline-flex';
            this.updateCategoryBtn.style.display = 'none';
        }
        
        // R√©initialiser l'ID de la cat√©gorie en cours d'√©dition
        this.currentEditingCategoryId = null;
    }
    
    /**
     * Ouvre le formulaire d'√©dition d'une cat√©gorie
     * @param {string} categoryId - L'identifiant de la cat√©gorie √† √©diter
     */
    openEditCategoryForm(categoryId) {
        try {
            // R√©cup√©rer la cat√©gorie
            const category = this.dataManager.getCategoryById(categoryId);
            
            if (!this.categoryNameInput || !this.categoryEmojiInput || !this.categoryColorInput) {
                console.error('√âl√©ments du formulaire non trouv√©s');
                return;
            }
            
            // Mettre √† jour l'ID de la cat√©gorie en cours d'√©dition
            this.currentEditingCategoryId = categoryId;
            
            // Remplir le formulaire avec les donn√©es de la cat√©gorie
            this.categoryNameInput.value = category.name || '';
            this.categoryEmojiInput.value = category.emoji || '';
            this.categoryColorInput.value = category.color || '#4caf50';
            
            // Afficher le bouton de mise √† jour et cacher le bouton d'ajout
            if (this.addCategoryBtn && this.updateCategoryBtn) {
                this.addCategoryBtn.style.display = 'none';
                this.updateCategoryBtn.style.display = 'inline-flex';
            }
            
            // Faire d√©filer jusqu'au formulaire
            this.categoryNameInput.scrollIntoView({ behavior: 'smooth' });
            
            // Mettre le focus sur le champ de nom
            this.categoryNameInput.focus();
        } catch (error) {
            console.error('Erreur lors de l\'ouverture du formulaire d\'√©dition:', error);
            alert('Erreur lors de l\'ouverture du formulaire d\'√©dition: ' + error.message);
        }
    }
    
    /**
     * Ajoute une nouvelle cat√©gorie
     * @returns {boolean} - Indique si l'ajout a r√©ussi
     */
    addCategory() {
        try {
            // Valider les donn√©es du formulaire
            if (!this.validateCategoryForm()) {
                return false;
            }
            
            // R√©cup√©rer les donn√©es du formulaire
            const categoryData = {
                name: this.categoryNameInput.value.trim(),
                emoji: this.categoryEmojiInput.value.trim(),
                color: this.categoryColorInput.value
            };
            
            // Ajouter la cat√©gorie via le gestionnaire de donn√©es
            const newCategory = this.dataManager.addCategory(categoryData);
            
            // Notifier l'utilisateur
            const notificationManager = window.app?.notificationManager;
            if (notificationManager) {
                notificationManager.showNotification(`Cat√©gorie "${newCategory.name}" ajout√©e avec succ√®s`);
            }
            
            // D√©clencher l'√©v√©nement de mise √† jour
            window.dispatchEvent(new CustomEvent('categories:updated'));
            
            // Mettre √† jour les interfaces
            this.renderCategories();
            this.renderCategoriesNav();
            this.updateCategorySelect();
            this.renderCategoryList();
            
            // R√©initialiser le formulaire
            this.resetCategoryForm();
            
            return true;
        } catch (error) {
            console.error('Erreur lors de l\'ajout de la cat√©gorie:', error);
            alert('Erreur lors de l\'ajout de la cat√©gorie: ' + error.message);
            return false;
        }
    }
    
    /**
     * Met √† jour une cat√©gorie existante
     * @returns {boolean} - Indique si la mise √† jour a r√©ussi
     */
    updateCategory() {
        try {
            // V√©rifier si une cat√©gorie est en cours d'√©dition
            if (!this.currentEditingCategoryId) {
                throw new Error('Aucune cat√©gorie en cours d\'√©dition');
            }
            
            // Valider les donn√©es du formulaire
            if (!this.validateCategoryForm()) {
                return false;
            }
            
            // R√©cup√©rer les donn√©es du formulaire
            const categoryData = {
                name: this.categoryNameInput.value.trim(),
                emoji: this.categoryEmojiInput.value.trim(),
                color: this.categoryColorInput.value
            };
            
            // Mettre √† jour la cat√©gorie via le gestionnaire de donn√©es
            const updatedCategory = this.dataManager.updateCategory(this.currentEditingCategoryId, categoryData);
            
            // Notifier l'utilisateur
            const notificationManager = window.app?.notificationManager;
            if (notificationManager) {
                notificationManager.showNotification(`Cat√©gorie "${updatedCategory.name}" mise √† jour avec succ√®s`);
            }
            
            // D√©clencher l'√©v√©nement de mise √† jour
            window.dispatchEvent(new CustomEvent('categories:updated'));
            
            // Mettre √† jour les interfaces
            this.renderCategories();
            this.renderCategoriesNav();
            this.updateCategorySelect();
            this.renderCategoryList();
            
            // R√©initialiser le formulaire
            this.resetCategoryForm();
            
            return true;
        } catch (error) {
            console.error('Erreur lors de la mise √† jour de la cat√©gorie:', error);
            alert('Erreur lors de la mise √† jour de la cat√©gorie: ' + error.message);
            return false;
        }
    }
    
    /**
     * Supprime une cat√©gorie
     * @param {string} categoryId - L'identifiant de la cat√©gorie √† supprimer
     * @returns {boolean} - Indique si la suppression a r√©ussi
     */
    deleteCategory(categoryId) {
        try {
            // Demander confirmation
            const confirmDelete = confirm('√ätes-vous s√ªr de vouloir supprimer cette cat√©gorie ? Les √©v√©nements associ√©s perdront leur cat√©gorie.');
            
            if (!confirmDelete) {
                return false;
            }
            
            // R√©cup√©rer la cat√©gorie pour l'affichage
            const categoryToDelete = this.dataManager.getCategoryById(categoryId);
            const categoryName = categoryToDelete.name;
            
            // Supprimer la cat√©gorie via le gestionnaire de donn√©es
            this.dataManager.deleteCategory(categoryId);
            
            // Notifier l'utilisateur
            const notificationManager = window.app?.notificationManager;
            if (notificationManager) {
                notificationManager.showNotification(`Cat√©gorie "${categoryName}" supprim√©e avec succ√®s`);
            }
            
            // D√©clencher l'√©v√©nement de mise √† jour
            window.dispatchEvent(new CustomEvent('categories:updated'));
            
            // Si nous avions un filtre actif sur cette cat√©gorie, le r√©initialiser
            const uiManager = window.app?.uiManager;
            if (uiManager && uiManager.activeFilter === categoryId) {
                window.dispatchEvent(new CustomEvent('categories:resetFilter'));
            }
            
            // Mettre √† jour les interfaces
            this.renderCategories();
            this.renderCategoriesNav();
            this.updateCategorySelect();
            this.renderCategoryList();
            
            return true;
        } catch (error) {
            console.error('Erreur lors de la suppression de la cat√©gorie:', error);
            alert('Erreur lors de la suppression de la cat√©gorie: ' + error.message);
            return false;
        }
    }
    
    /**
     * Valide les donn√©es du formulaire de cat√©gorie
     * @returns {boolean} - Indique si les donn√©es sont valides
     */
    validateCategoryForm() {
        // V√©rifier si les √©l√©ments du formulaire existent
        if (!this.categoryNameInput || !this.categoryEmojiInput || !this.categoryColorInput) {
            console.error('√âl√©ments du formulaire non trouv√©s');
            return false;
        }
        
        // V√©rifier si le nom est renseign√©
        if (!this.categoryNameInput.value.trim()) {
            alert('Veuillez saisir un nom pour la cat√©gorie');
            this.categoryNameInput.focus();
            return false;
        }
        
        // V√©rifier si l'emoji est renseign√©
        if (!this.categoryEmojiInput.value.trim()) {
            alert('Veuillez choisir un emoji pour la cat√©gorie');
            this.categoryEmojiInput.focus();
            return false;
        }
        
        // V√©rifier si la couleur est renseign√©e
        if (!this.categoryColorInput.value) {
            alert('Veuillez choisir une couleur pour la cat√©gorie');
            this.categoryColorInput.focus();
            return false;
        }
        
        return true;
    }
    
    /**
     * Affiche la liste des cat√©gories dans la modal
     */
    renderCategoryList() {
        if (!this.categoryList) return;
        
        // Vider la liste
        this.categoryList.innerHTML = '';
        
        // R√©cup√©rer les cat√©gories
        const categories = this.dataManager.getAllCategories();
        
        // Afficher un message si aucune cat√©gorie
        if (categories.length === 0) {
            this.categoryList.innerHTML = '<p>Aucune cat√©gorie disponible.</p>';
            return;
        }
        
        // Cr√©er le conteneur de grille
        const categoryItems = document.createElement('div');
        categoryItems.className = 'categories-grid';
        
        // Cr√©er une carte pour chaque cat√©gorie
        categories.forEach(category => {
            const categoryItem = document.createElement('div');
            categoryItem.className = 'category-item';
            categoryItem.dataset.categoryId = category.id;
            
            // Couleur et emoji
            const categoryColor = document.createElement('div');
            categoryColor.className = 'category-color';
            categoryColor.style.backgroundColor = category.color;
            categoryColor.textContent = category.emoji;
            
            // Informations
            const categoryInfo = document.createElement('div');
            categoryInfo.style.flex = '1';
            
            const categoryName = document.createElement('div');
            categoryName.className = 'category-name';
            categoryName.textContent = category.name;
            
            categoryInfo.appendChild(categoryName);
            
            // Boutons d'action
            const actionsContainer = document.createElement('div');
            actionsContainer.style.display = 'flex';
            actionsContainer.style.gap = '5px';
            
            // Bouton d'√©dition
            const editBtn = document.createElement('button');
            editBtn.className = 'btn-icon';
            editBtn.innerHTML = '<i class="fas fa-edit"></i>';
            editBtn.title = 'Modifier';
            editBtn.addEventListener('click', (e) => {
                e.preventDefault();
                e.stopPropagation();
                this.openEditCategoryForm(category.id);
            });
            
            // Bouton de suppression
            const deleteBtn = document.createElement('button');
            deleteBtn.className = 'btn-icon btn-danger';
            deleteBtn.innerHTML = '<i class="fas fa-trash-alt"></i>';
            deleteBtn.title = 'Supprimer';
            deleteBtn.addEventListener('click', (e) => {
                e.preventDefault();
                e.stopPropagation();
                this.deleteCategory(category.id);
            });
            
            actionsContainer.appendChild(editBtn);
            actionsContainer.appendChild(deleteBtn);
            
            // Assembler l'√©l√©ment
            categoryItem.appendChild(categoryColor);
            categoryItem.appendChild(categoryInfo);
            categoryItem.appendChild(actionsContainer);
            
            // Ajouter √† la grille
            categoryItems.appendChild(categoryItem);
        });
        
        // Ajouter la grille √† la liste
        this.categoryList.appendChild(categoryItems);
    }
    
    /**
     * Affiche les cat√©gories dans la navigation lat√©rale
     */
    renderCategoriesNav() {
        if (!this.categoriesNav) return;
        
        // Vider la navigation
        this.categoriesNav.innerHTML = '';
        
        // Ajouter l'option "Tous les √©v√©nements"
        const allEventsItem = document.createElement('div');
        allEventsItem.className = 'nav-item';
        allEventsItem.dataset.categoryId = 'all';
        
        // Ic√¥ne pour "Tous les √©v√©nements"
        const allEventsIcon = document.createElement('span');
        allEventsIcon.style.marginRight = '10px';
        allEventsIcon.innerHTML = '<i class="fas fa-calendar-alt"></i>';
        
        // Texte
        const allEventsName = document.createElement('span');
        allEventsName.textContent = 'Tous les √©v√©nements';
        
        // Assembler l'√©l√©ment
        allEventsItem.appendChild(allEventsIcon);
        allEventsItem.appendChild(allEventsName);
        
        // √âv√©nement de clic pour r√©initialiser le filtre
        allEventsItem.addEventListener('click', () => {
            // D√©clencher un √©v√©nement pour r√©initialiser le filtre
            window.dispatchEvent(new CustomEvent('categories:resetFilter'));
            
            // Mettre √† jour les √©tats actifs
            this.categoriesNav.querySelectorAll('.nav-item').forEach(item => {
                item.classList.remove('active');
            });
            allEventsItem.classList.add('active');
        });
        
        // Ajouter √† la navigation
        this.categoriesNav.appendChild(allEventsItem);
        
        // Si aucun filtre n'est actif, marquer "Tous les √©v√©nements" comme actif
        const uiManager = window.app?.uiManager;
        if (!uiManager || !uiManager.activeFilter || uiManager.activeFilter === 'all') {
            allEventsItem.classList.add('active');
        }
        
        // R√©cup√©rer les cat√©gories
        const categories = this.dataManager.getAllCategories();
        
        // Afficher un message si aucune cat√©gorie
        if (categories.length === 0) {
            const noCategories = document.createElement('div');
            noCategories.className = 'nav-item disabled';
            noCategories.textContent = 'Aucune cat√©gorie';
            this.categoriesNav.appendChild(noCategories);
            return;
        }
        
        // Cr√©er un √©l√©ment de navigation pour chaque cat√©gorie
        categories.forEach(category => {
            const navItem = document.createElement('div');
            navItem.className = 'nav-item';
            navItem.dataset.categoryId = category.id;
            
            // Si cette cat√©gorie est le filtre actif, la marquer comme active
            if (uiManager && uiManager.activeFilter === category.id) {
                navItem.classList.add('active');
            }
            
            // Emoji
            const categoryEmoji = document.createElement('span');
            categoryEmoji.style.marginRight = '10px';
            categoryEmoji.textContent = category.emoji;
            
            // Indicateur de couleur
            const colorIndicator = document.createElement('span');
            colorIndicator.className = 'color-indicator';
            colorIndicator.style.display = 'inline-block';
            colorIndicator.style.width = '8px';
            colorIndicator.style.height = '8px';
            colorIndicator.style.borderRadius = '50%';
            colorIndicator.style.backgroundColor = category.color;
            colorIndicator.style.marginRight = '5px';
            
            // Nom
            const categoryName = document.createElement('span');
            categoryName.textContent = category.name;
            
            // Assembler l'√©l√©ment
            navItem.appendChild(categoryEmoji);
            navItem.appendChild(colorIndicator);
            navItem.appendChild(categoryName);
            
            // √âv√©nement de clic pour filtrer les √©v√©nements
            navItem.addEventListener('click', (e) => {
                // Mettre √† jour les √©tats actifs
                this.categoriesNav.querySelectorAll('.nav-item').forEach(item => {
                    item.classList.remove('active');
                });
                navItem.classList.add('active');
                
                // D√©clencher un √©v√©nement pour filtrer les √©v√©nements
                window.dispatchEvent(new CustomEvent('categories:filter', {
                    detail: { categoryId: category.id }
                }));
            });
            
            // Ajouter √† la navigation
            this.categoriesNav.appendChild(navItem);
        });
    }
    
    /**
     * Met √† jour le s√©lecteur de cat√©gories dans le formulaire d'√©v√©nement
     */
    updateCategorySelect() {
        if (!this.categorySelect) return;
        
        // Sauvegarder la valeur actuelle
        const currentValue = this.categorySelect.value;
        
        // Vider le s√©lecteur
        this.categorySelect.innerHTML = '';
        
        // R√©cup√©rer les cat√©gories
        const categories = this.dataManager.getAllCategories();
        
        // Option vide
        const emptyOption = document.createElement('option');
        emptyOption.value = '';
        emptyOption.textContent = 'S√©lectionner une cat√©gorie';
        this.categorySelect.appendChild(emptyOption);
        
        // Afficher un message si aucune cat√©gorie
        if (categories.length === 0) {
            const noOption = document.createElement('option');
            noOption.value = '';
            noOption.textContent = 'Aucune cat√©gorie disponible';
            noOption.disabled = true;
            this.categorySelect.appendChild(noOption);
            return;
        }
        
        // Cr√©er une option pour chaque cat√©gorie
        categories.forEach(category => {
            const option = document.createElement('option');
            option.value = category.id;
            option.textContent = `${category.emoji} ${category.name}`;
            this.categorySelect.appendChild(option);
        });
        
        // Restaurer la valeur s√©lectionn√©e si possible
        if (currentValue) {
            // V√©rifier si la cat√©gorie existe toujours
            const categoryStillExists = categories.some(cat => cat.id === currentValue);
            if (categoryStillExists) {
                this.categorySelect.value = currentValue;
            }
        }
    }
    
    /**
     * Rend une liste des cat√©gories dans un √©l√©ment HTML
     * @param {HTMLElement} container - L'√©l√©ment conteneur o√π afficher les cat√©gories
     */
    renderCategories(container) {
        if (!container) return;
        
        // Vider le conteneur
        container.innerHTML = '';
        
        // R√©cup√©rer les cat√©gories
        const categories = this.dataManager.getAllCategories();
        
        // Afficher un message si aucune cat√©gorie
        if (categories.length === 0) {
            container.innerHTML = '<p>Aucune cat√©gorie disponible.</p>';
            return;
        }
        
        // Cr√©er une carte pour chaque cat√©gorie
        categories.forEach(category => {
            const categoryItem = document.createElement('div');
            categoryItem.className = 'category-item';
            categoryItem.dataset.categoryId = category.id;
            
            // Couleur et emoji
            const categoryColor = document.createElement('div');
            categoryColor.className = 'category-color';
            categoryColor.style.backgroundColor = category.color;
            categoryColor.textContent = category.emoji;
            
            // Nom
            const categoryName = document.createElement('div');
            categoryName.className = 'category-name';
            categoryName.textContent = category.name;
            
            // Assembler l'√©l√©ment
            categoryItem.appendChild(categoryColor);
            categoryItem.appendChild(categoryName);
            
            // √âv√©nement de clic pour filtrer les √©v√©nements
            categoryItem.addEventListener('click', () => {
                window.dispatchEvent(new CustomEvent('categories:filter', {
                    detail: { categoryId: category.id }
                }));
            });
            
            // Ajouter au conteneur
            container.appendChild(categoryItem);
        });
    }
    
    /**
     * Obtient le nombre total de cat√©gories
     * @returns {number} - Le nombre de cat√©gories
     */
    getCategoriesCount() {
        return this.dataManager.getAllCategories().length;
    }
    
    /**
     * Obtient une cat√©gorie par son ID
     * @param {string} categoryId - L'identifiant de la cat√©gorie
     * @returns {Object|null} - La cat√©gorie ou null si non trouv√©e
     */
    getCategoryById(categoryId) {
        try {
            return this.dataManager.getCategoryById(categoryId);
        } catch (error) {
            console.error('Erreur lors de la r√©cup√©ration de la cat√©gorie:', error);
            return null;
        }
    }
}